plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "com.google.protobuf" version '0.9.0'
    id "org.jetbrains.kotlin.kapt"
    id "dagger.hilt.android.plugin"
    id "androidx.navigation.safeargs"
    id "com.google.dagger.hilt.android"
    id "com.ncorti.ktfmt.gradle" version "0.12.0"
}

android {
    namespace 'com.iotgroup2.matterapp'
    compileSdk 33

    defaultConfig {
        applicationId "com.iotgroup2.matterapp"
        minSdk 27
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['third_party/connectedhomeip/libs/jniLibs']
        }
    }
    android.buildFeatures.viewBinding = true

    // Specifies one flavor dimension.
    flavorDimensions += "version"
    productFlavors {
        create("default") {
            dimension = "version"
            applicationIdSuffix = ".default"
            versionNameSuffix = "-default"
        }
        create("targetcommissioner") {
            dimension = "version"
            applicationIdSuffix = ".targetcommissioner"
            versionNameSuffix = "-targetcommissioner"
        }
    }
}

dependencies {
    // Native libs
    implementation fileTree(dir: "third_party/connectedhomeip/libs", include: ["*.jar", "*.so"])

    // Connected Home
    implementation 'com.google.android.gms:play-services-base:18.1.0'
    implementation 'com.google.android.gms:play-services-home:16.0.0'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.databinding:databinding-runtime:7.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.2.0'

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensionsVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

    // Datastore
    implementation "androidx.datastore:datastore:$dataStoreVersion"
    implementation 'androidx.datastore:datastore-core:1.0.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.18.0'

    // Hilt
    // https://dagger.dev/hilt/gradle-setup
    implementation 'com.google.dagger:hilt-android:2.44.2'
    implementation 'com.google.ar:core:1.35.0'
    kapt 'com.google.dagger:hilt-compiler:2.44.2'

    // Hilt For instrumentation tests
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.44.2")
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.44.2'

    // Task.await()
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4'

    // Other
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.9'

    // Retrofit
    implementation 'com.squareup.moshi:moshi:1.12.0'
    implementation "com.squareup.moshi:moshi-kotlin:1.12.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"

    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    // Serialization
//    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1")

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics-ktx'
    // cloud messaging
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // multi state switch - https://github.com/davidmigloz/multi-state-switch
    implementation 'com.github.davidmigloz:multi-state-switch:2.2.0'

    // spinner kit - https://github.com/ybq/Android-SpinKit
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
}

// Issue with androidx.test.espresso:espresso-contrib:3.5.1
// https://github.com/android/android-test/issues/999
configurations.configureEach {
    exclude group: "com.google.protobuf", module: "protobuf-lite"
}

kapt {
    correctErrorTypes true
}

protobuf {
    protoc {
        // For Apple M1 Chip
        def isMac = System.properties['os.name'].toLowerCase().contains('mac')
        def protocDepSuffix = isMac ? ":osx-x86_64" : ""
        artifact = "com.google.protobuf:protoc:3.14.0" + protocDepSuffix
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}